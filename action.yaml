name: 'docfx for GitHub Pages'
description: 'Deploy beautiful API reference to GitHub Pages with only 1 action. No unnecessary file upload and complicated `docfx` setup.'
author: '@sator-imaging'

# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: 'upload-cloud'
  color: 'yellow'


inputs:

  # required options
  app_name:
    description: |
      Text shown next to header logo.
      Default 'docfx-pages'
    default:  'docfx-pages'
    required: true

  site_title:
    description: |
      Website title used as suffix for HTML pages. ex) "HTML Page Title | <site title>"
      Default 'docfx for GitHub Pages'
    default:  'docfx for GitHub Pages'
    required: true

  site_footer:
    description: |
      Footer text for generated pages. HTML accepted.
      Default '&copy; 2023 Sator Imaging'
    default:  '&copy; 2023 Sator Imaging'
    required: true

  # optional
  define_symbols:
    description: |
      Define additional preprocessor symbols. (separate symbols by ';')
      Default ''
    default:  ''

  class_members:
    description: |
      Generate all-in-one class api document or separate each member into pages.
      Accepts one of: 'separatePages' | 'samePage'
      Default 'separatePages'
    default:  'separatePages'

  site_logo:
    description: |
      Website logo file path. Accepts full-qualified URI or relative path to '.docfx' folder.
      Default 'images/wikimedia-commons/logo-csharp-recolor.svg'
    default:  'images/wikimedia-commons/logo-csharp-recolor.svg'

  site_favicon:
    description: |
      Favicon file path. Accepts full-qualified URI or relative path to '.docfx' folder.
      Default 'images/wikimedia-commons/logo-csharp-recolor.svg'
    default:  'images/wikimedia-commons/logo-csharp-recolor.svg'

  google_analytics:
    description: |
      Google Analytics ID. Leave empty to disable this feature.
      Default ''
    default:  ''

  # customize main.js/css, see docfx reference for detail
  # https://dotnet.github.io/docfx/docs/template.html?tabs=modern#custom-template
  # note that these are added after builtin settings
  main_js:
    description: |
      Default ''
    default:  ''

  main_css:
    description: |
      Default ''
    default:  ''


outputs:
  page_url:
    description: 'URL to deployed GitHub Pages'
    value: ${{ steps.deployment.outputs.page_url }}


runs:
  using: "composite"
  steps:

    # do not checkout caller's repository.
    # it should be controlled by caller.

    - name: DEBUG
      shell: bash
      run: |
        echo "github.ref: ${{ github.ref }}"
        echo "github.action_ref: ${{ github.action_ref }}"
        echo "github.workflow_ref: ${{ github.workflow_ref }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.head_ref: ${{ github.head_ref }}"
        echo "GITHUB_REF : ${GITHUB_REF}"
        echo "GITHUB_ACTION_REPOSITORY: ${GITHUB_ACTION_REPOSITORY}"
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
        echo "GITHUB_ACTION_PATH: ${GITHUB_ACTION_PATH}"
        echo "GITHUB_ACTION_PATH##*/: ${GITHUB_ACTION_PATH##*/}"

    - name: Set env variables
      shell: bash
      run: |
        echo "ACTION_VERSION=${GITHUB_ACTION_PATH##*/}" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/})" >> $GITHUB_ENV
        echo ${{ env.ACTION_VERSION }}
        echo ${{ env.REPO_NAME }}


    - name: Checkout docfx-pages
      uses: actions/checkout@v3
      with:
        repository: 'sator-imaging/docfx-pages'
        sparse-checkout: '.docfx'
        sparse-checkout-cone-mode: true
        path: 'tmp-docfx-pages'
        ref: ${{ env.ACTION_VERSION }}

    - name: Combine repository
      shell: bash
      run: |
        cp -n -r 'tmp-docfx-pages/.docfx' '.'
        rm -rf    tmp-docfx-pages

    - name: Rename README and LICENSE
      shell: bash
      run: |
        if [[ -f README ]]; then
          if ! [[ -f README.md ]]; then
            mv README README.md
          fi
        fi
        if [[ -f LICENSE ]]; then
          if ! [[ -f LICENSE.md ]]; then
            mv LICENSE LICENSE.md
          fi
        fi

    - name: Fix document title if required
      shell: bash
      run: |
        if [[ -f README.md ]]; then
          if ! [[ $(head -1 README.md | sed -n -E '/^# /p') ]]; then
            echo "# $(cat README.md)" > README.md
          fi
        fi
        if [[ -f LICENSE.md ]]; then
          if ! [[ $(head -1 LICENSE.md | sed -n -E '/^# /p') ]]; then
            echo "# $(cat LICENSE.md)" > LICENSE.md
          fi
        fi

    - name: Generate README.md and index.md
      shell: bash
      run: |
        if ! [[ -f 'README.md' ]]; then
          echo "# $(echo ${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/})" > README.md
          echo "${{ github.server_url }}/${{ github.repository }}" >> README.md
        fi
        if ! [[ -f 'index.md' ]]; then
          mv 'README.md' 'index.md'
        fi


    - name: HeaderDoc extraction and Generate toc.yml
      shell: bash
      run: |
        TOC_LINKS=''
        HDOC_PAGE=''
        HDOC_DIR_NAME='HeaderDocs'
        HDOC_DIR=".docfx/${HDOC_DIR_NAME}"

        pushd '.'
          DIR=.
          LEN=2  # DIR.length + 1 (slash)
          
          for f in $(find $DIR -name '*.cs'); do
            if [[ -f $f ]]; then
              if ! [[ $(head -1 $f | sed -n -E '/^\/\*/p') ]]; then
                echo -e "NO HEADER DOC \t ${f:$LEN} ($f)"
                continue
              fi

              # filename=$(basename -- "$f")
              # extension="${filename##*.}"
              # filename="${filename%.*}"

              HDOC=$(sed -n -E '
                /^\/\*/{
                  :a;
                  N;
                  /[\r\n][[:blank:]]?\*\//!ba;
                  s/^\/\*[[:blank:]\r\n\*]*//;
                  s/([\r\n]+)[[:blank:]]?[\*\/]+[[:blank:]]?/\1/g;
                  s/[[:blank:]\r\n]+$//;
                  s/ \r?\n/\n/g;
                  s/\r?\n/  \n/g;
                  s/^#+[[:blank:]]*//;
                  s/^/# /;
                  p;
                }' $f )

              if [[ $HDOC ]]; then
                MD_FILE="${HDOC_DIR}/${f:$LEN}.md"
                MD_DIR=$(dirname "$MD_FILE")
                mkdir -p "$MD_DIR"

                REPO_PATH="https://github.com/$(echo ${GITHUB_REPOSITORY})/tree/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}/${f:$LEN}"
                HDOC=$(sed \
                  -e '2i\ ' \
                  -e "2i <i class='bi bi-code-slash align-text-top'></i>" \
                  -e "2i <code>${f:$LEN}</code> &nbsp;" \
                  -e "2i <a href='${REPO_PATH}' class='small'>HeaderDoc</a>" \
                  -e '2i\ ' \
                  <<< "$HDOC")

                ##echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                echo "HEADER DOC: $MD_FILE"
                ##echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                ##echo "$HDOC"
                ##echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

                echo "$HDOC" > "$MD_FILE"
                printf -v TOC_LINKS "${TOC_LINKS}  - href: ${HDOC_DIR_NAME}/${f:$LEN}.md\n"
                printf -v HDOC_PAGE "${HDOC_PAGE}[${f:$LEN}](${HDOC_DIR_NAME}/${f:$LEN}.md)  \n"
              fi

            fi
          done
        popd

        AUTO_MD=''
        for f in $(find . -name '*.md'); do
          echo "MD COLLECTOR: checking... $f"
          if [[ "$f" == ./index.md || "$f" == ./LICENSE.md || "$f" == ./.docfx/* ]]; then
            continue
          fi
          echo "FILE COLLECTED: $f"
          printf -v TOC_LINKS "${TOC_LINKS}  - href: ../${f:$LEN}\n"
          printf -v AUTO_MD "${AUTO_MD}[${f:$LEN}](../${f:$LEN})  \n"
        done

        cd .docfx
          if ! [[ -f 'toc.yml' ]]; then
            if [[ $TOC_LINKS ]]; then

              AUTO_DOCS='Automaton.md'
              echo "# \`docfx-pages\` Automaton" >> $AUTO_DOCS
              echo "Here is list of documents automatically generated or collected by" >> $AUTO_DOCS
              echo "[\`docfx-pages\`](https://github.com/marketplace/actions/docfx-for-github-pages)" >> $AUTO_DOCS
              echo "## Markdown Collector" >> $AUTO_DOCS
              echo "${AUTO_MD}" >> $AUTO_DOCS
              echo "## HeaderDoc Generator" >> $AUTO_DOCS
              echo "${HDOC_PAGE}" >> $AUTO_DOCS
              echo "## API Class Index" >> $AUTO_DOCS
              echo "[By Namespace](api/index.md)  " >> $AUTO_DOCS
              echo "[By Alphabetically](api/index.md#alphabetical-order)  " >> $AUTO_DOCS

              echo "- name: Docs" >> 'toc.yml'
              ## echo "  expanded: true" >> 'toc.yml'
              echo "  href: ${AUTO_DOCS}" >> 'toc.yml'
              echo "  items:" >> 'toc.yml'
              echo "  - name: Introduction" >> 'toc.yml'
              echo "    href: index.html" >> 'toc.yml'
              echo "${TOC_LINKS}" >> 'toc.yml'
            else
              echo "- name: Introduction" >> 'toc.yml'
              echo "  href: index.html" >> 'toc.yml'
            fi
            echo '- name: API' >> 'toc.yml'
            echo '  href: api/toc.yml' >> 'toc.yml'
            echo '  topicHref: api/index.html' >> 'toc.yml'
            echo '  expanded: true' >> 'toc.yml'
            if [[ -f '../LICENSE.md' ]]; then
              echo '- name: License' >> 'toc.yml'
              echo '  href: LICENSE.html' >> 'toc.yml'
            fi
          fi
        cd ..


    - name: Insert define symbols into all the .cs files... hehe.
      shell: bash
      run: |
        for f in $(find . -name '*.cs'); do
          cat .docfx/define_symbols.txt "$f" > "__stmg__"
          mv -f "__stmg__" "$f"
          ## cat "$f"
        done


    - name: Generate docfx config
      shell: bash
      run: |
        cd .docfx

          printf "$(cat docfx-metadata.json)" \
            "__placeholder__" \
            "__nothing__" \
            "${{ inputs.class_members }}" \
            "${{ inputs.define_symbols }}" \
            \
            \
            > docfx-metadata-mref.json

          printf "$(cat docfx-metadata.json)" \
            "outputFormat" \
            "apiPage" \
            "${{ inputs.class_members }}" \
            "${{ inputs.define_symbols }}" \
            \
            \
            > docfx-metadata-api.json

          printf "$(cat docfx-build.json)" \
            "${{ inputs.app_name }}" \
            "${{ inputs.site_title }}" \
            "${{ inputs.site_footer }}" \
            "${{ inputs.site_logo }}" \
            "${{ inputs.site_favicon }}" \
            "${{ inputs.google_analytics }}" \
            "https://${{ github.repository_owner }}.github.io/${{ env.REPO_NAME }}/" \
            \
            > docfx-build.json

          echo "${{ inputs.main_js }}"  >> template/public/main.js
          echo "${{ inputs.main_css }}" >> template/public/main.css

        cd ..


    # DEBUG
    - name: DEBUG
      shell: bash
      run: |
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        cat .docfx/docfx-metadata-mref.json
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"


    - name: Dotnet Setup
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x


    # two pass processing
    - name: Run DocFX
      shell: bash
      run: |

        ##dotnet tool update -g docfx
        dotnet tool install --global docfx --version 2.74.1

        pushd .docfx

          ##docfx docfx.json

          # rename temporarily
          mv toc.yml __stmg__toc.txt

          # 1st pass
          docfx metadata docfx-metadata-api.json
          cp api/toc.yml __stmg__toc_api.txt

          # 2nd pass
          docfx metadata docfx-metadata-mref.json
          cp api/toc.yml __stmg__toc_global.txt

          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat __stmg__toc_global.txt
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat __stmg__toc_api.txt
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          # merge toc
          sed -n -E '
            /^- uid\: Global$/{
              :a;
              N;
              /[\r\n]+- uid\: /!ba;
              s/[\r\n]+[^\r\n]+$//;
              s/[\r\n]+  name\: ..[\r\n]+/\n  name\: "global\:\:"\n/;
              p;
            }' -i __stmg__toc_global.txt
          head -1 __stmg__toc_api.txt > api/toc.yml
          cat __stmg__toc_global.txt >> api/toc.yml
          tail -n +2 __stmg__toc_api.txt >> api/toc.yml


          mv __stmg__toc.txt toc.yml

          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat toc.yml
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat api/toc.yml
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"


          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat "Generating api/index.md"
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          # genereate api/index.md
          if ! [[ -f api/index.md ]]; then
            echo "# API Reference" > api/index.md
            echo "Class index of \`${{ env.REPO_NAME }}\` API including Enum, Interface and Struct." >> api/index.md
            echo "[Alphabetical Order](#alphabetical-order)." >> api/index.md


            # some project fails on build (error: file is being used by another process)
            # need a delay
            sleep 7s

            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            cat "1st Build"
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            docfx build docfx-build-fast.json
            
            jq -c '[ .items[] | .items[] |= if .href then "- [\(.name)](\(.href))" else "### \(.name)" end ]' \
              _site/api/toc.json \
              | jq -c '[ .[] | .shortName = .name | .shortName |= match("[^\\.]+$").string | .parentName = .name | .parentName |= sub("\\.?[^\\.]+$"; "") ]' \
              | jq -r '.[] | "## \(.shortName) <span class=\"badge rounded-pill bg-info\">\(.parentName)</span>", "```csharp", "namespace \(.name)", "```", "\(.items[])"' \
              >> api/index.md

            # TODO: alphabetical order
            echo "## Alphabetical Order" >> api/index.md
            jq -c '[ .items[].items[] | select(has("href")) | .shortName = .name | .shortName |= match("[^\\.]+$").string ] | sort_by(.shortName)' \
              _site/api/toc.json \
              | jq -r '.[] | "- [\(.shortName)](\(.href))"' \
              >> api/index.md

            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            cat _site/api/toc.json
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            cat api/index.md
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          fi

        popd

    # some project fails on build (error: file is being used by another process)
    # need a delay
    - name: Build Pages
      shell: bash
      run: |

        sleep 7s

        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        cat "2nd Build"
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        docfx build .docfx/docfx-build.json


    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        # Upload entire repository
        path: '.docfx/_site'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
