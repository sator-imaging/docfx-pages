name: 'docfx for GitHub Pages'
description: 'Deploy beautiful API reference to GitHub Pages with only 1 action. No unnecessary file upload and complicated `docfx` setup.'
author: '@sator-imaging'

# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: 'upload-cloud'
  color: 'yellow'


inputs:

  # required options
  app_name:
    description: |
      Text shown next to header logo.
      Default 'docfx-pages'
    default:  'docfx-pages'
    required: true

  site_title:
    description: |
      Website title used as suffix for HTML pages. ex) "HTML Page Title | <site title>"
      Default 'docfx for GitHub Pages'
    default:  'docfx for GitHub Pages'
    required: true

  site_footer:
    description: |
      Footer text for generated pages. HTML accepted.
      Default '&copy; 2023 Sator Imaging'
    default:  '&copy; 2023 Sator Imaging'
    required: true

  # optional
  define_symbols:
    description: |
      Define additional preprocessor symbols. (separate symbols by ';')
      Default ''
    default:  ''

  class_members:
    description: |
      Generate all-in-one class api document or separate each member into pages.
      Accepts one of: 'separatePages' | 'samePage'
      Default 'separatePages'
    default:  'separatePages'

  site_logo:
    description: |
      Website logo file path. Accepts full-qualified URI or relative path to '.docfx' folder.
      Default 'images/wikimedia-commons/logo-csharp-recolor.svg'
    default:  'images/wikimedia-commons/logo-csharp-recolor.svg'

  site_favicon:
    description: |
      Favicon file path. Accepts full-qualified URI or relative path to '.docfx' folder.
      Default 'images/wikimedia-commons/logo-csharp-recolor.svg'
    default:  'images/wikimedia-commons/logo-csharp-recolor.svg'

  google_analytics:
    description: |
      Google Analytics ID. Leave empty to disable this feature.
      Default ''
    default:  ''

  # customize main.js/css, see docfx reference for detail
  # https://dotnet.github.io/docfx/docs/template.html?tabs=modern#custom-template
  # note that these are added after builtin settings
  main_js:
    description: |
      Default ''
    default:  ''

  main_css:
    description: |
      Default ''
    default:  ''


outputs:
  page_url:
    description: 'URL to deployed GitHub Pages'
    value: ${{ steps.deployment.outputs.page_url }}


runs:
  using: "composite"
  steps:

    # do not checkout caller's repository.
    # it should be controlled by caller.

    - name: DEBUG
      shell: bash
      run: |
        echo "github.ref: ${{ github.ref }}"
        echo "github.action_ref: ${{ github.action_ref }}"
        echo "github.workflow_ref: ${{ github.workflow_ref }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.head_ref: ${{ github.head_ref }}"
        echo "GITHUB_REF : ${GITHUB_REF}"
        echo "GITHUB_ACTION_REPOSITORY: ${GITHUB_ACTION_REPOSITORY}"
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
        echo "GITHUB_ACTION_PATH: ${GITHUB_ACTION_PATH}"
        echo "GITHUB_ACTION_PATH##*/: ${GITHUB_ACTION_PATH##*/}"

    - name: Set env variables
      shell: bash
      run: |
        echo "ACTION_VERSION=${GITHUB_ACTION_PATH##*/}" >> $GITHUB_ENV
        echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/})" >> $GITHUB_ENV
        echo ${{ env.ACTION_VERSION }}
        echo ${{ env.REPO_NAME }}


    - name: Dotnet Setup
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x


    - name: Checkout docfx-pages
      uses: actions/checkout@v3
      with:
        repository: 'sator-imaging/docfx-pages'
        sparse-checkout: '.docfx'
        sparse-checkout-cone-mode: true
        path: 'tmp-docfx-pages'
        ref: ${{ env.ACTION_VERSION }}

    - name: Combine repository
      shell: bash
      run: |
        cp -n -r 'tmp-docfx-pages/.docfx' '.'
        rm -rf    tmp-docfx-pages

    - name: Rename README and LICENSE
      shell: bash
      run: |
        if [[ -f README ]]; then
          if ! [[ -f README.md ]]; then
            mv README README.md
          fi
        fi
        if [[ -f LICENSE ]]; then
          if ! [[ -f LICENSE.md ]]; then
            mv LICENSE LICENSE.md
          fi
        fi

    - name: Fix document title if required
      shell: bash
      run: |
        if [[ -f README.md ]]; then
          if ! [[ $(head -1 README.md | sed -n -E '/^# /p') ]]; then
            echo "# $(cat README.md)" > README.md
          fi
        fi
        if [[ -f LICENSE.md ]]; then
          if ! [[ $(head -1 LICENSE.md | sed -n -E '/^# /p') ]]; then
            echo "# $(cat LICENSE.md)" > LICENSE.md
          fi
        fi

    - name: Generate README.md and index.md
      shell: bash
      run: |
        if ! [[ -f 'README.md' ]]; then
          echo "# $(echo ${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/})" > README.md
          echo "${{ github.server_url }}/${{ github.repository }}" >> README.md
        fi
        if ! [[ -f 'index.md' ]]; then
          mv 'README.md' 'index.md'
        fi

    - name: Generate .docfx/api/index.md
      shell: bash
      run: |
        mkdir -p .docfx/api
        pushd .docfx/api
          if ! [[ -f index.md ]]; then
            echo "# API Reference" > index.md
          fi
        popd


    - name: HeaderDoc extraction and Generate toc.yml
      shell: bash
      run: |
        TOC_LINKS=''
        HDOC_PAGE=''
        HDOC_DIR_NAME='HeaderDocs'
        HDOC_DIR=".docfx/${HDOC_DIR_NAME}"

        pushd '.'
          DIR=.
          LEN=2  # DIR.length + 1 (slash)
          
          for f in $(find $DIR -name '*.cs'); do
            if [[ -f $f ]]; then
              if ! [[ $(head -1 $f | sed -n -E '/^\/\*+/p') ]]; then
                echo -e "NO HEADER DOC \t ${f:$LEN} ($f)"
                continue
              fi

              # filename=$(basename -- "$f")
              # extension="${filename##*.}"
              # filename="${filename%.*}"

              HDOC=$(sed -n -E '
                /^\/\*+/{
                  :a;
                  N;
                  /[\r\n][[:blank:]]?\*\//!ba;
                  s/^\/\*+[[:blank:]\r\n\*]+//;
                  s/([\r\n]+)[[:blank:]]?[\*\/]+[[:blank:]]?/\1/g;
                  s/[[:blank:]\r\n]+$//;
                  s/ \r?\n/\n/g;
                  s/\r?\n/  \n/g;
                  s/^#+[[:blank:]]*//;
                  s/^/# /;
                  p;
                }' $f )

              if [[ $HDOC ]]; then
                MD_FILE="${HDOC_DIR}/${f:$LEN}.md"
                MD_DIR=$(dirname "$MD_FILE")
                mkdir -p "$MD_DIR"

                REPO_PATH="https://github.com/$(echo ${GITHUB_REPOSITORY})/tree/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}/${f:$LEN}"
                HDOC=$(sed \
                  -e '2i\ ' \
                  -e "2i <i class='bi bi-code-slash align-text-top'></i>" \
                  -e "2i <code>${f:$LEN}</code> &nbsp;" \
                  -e "2i <a href='${REPO_PATH}' class='small'>HeaderDoc</a>" \
                  -e '2i\ ' \
                  <<< "$HDOC")

                echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                echo "$MD_FILE"
                echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
                echo "$HDOC"
                echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

                echo "$HDOC" > "$MD_FILE"
                printf -v TOC_LINKS "${TOC_LINKS}  - href: ${HDOC_DIR_NAME}/${f:$LEN}.md\n"
                printf -v HDOC_PAGE "${HDOC_PAGE}<a href='${HDOC_DIR_NAME}/${f:$LEN}.html'>${f:$LEN}</a>  \n"
              fi

            fi
          done
        popd

        for f in $(find . -name '*.md'); do
          echo "AUTO MD COLLECTOR: $f"
          if [[ "$f" == ./index.md || "$f" == ./LICENSE.md || "$f" == ./.docfx/* ]]; then
            continue
          fi
          echo "FILE COLLECTED: $f"
          printf -v TOC_LINKS "${TOC_LINKS}  - href: ../${f:$LEN}\n"
        done

        cd .docfx
          if ! [[ -f 'toc.yml' ]]; then
            if [[ $TOC_LINKS ]]; then

              echo "# HeaderDoc Index" >> hdocs.md
              echo "Here is list of \`HeaderDoc\` automatically generated from the source code comment." >> hdocs.md
              echo "" >> hdocs.md
              echo "${HDOC_PAGE}" >> hdocs.md

              echo "- name: Docs" >> 'toc.yml'
              ## echo "  expanded: true" >> 'toc.yml'
              echo "  href: hdocs.html" >> 'toc.yml'
              echo "  items:" >> 'toc.yml'
              echo "  - name: Introduction" >> 'toc.yml'
              echo "    href: index.html" >> 'toc.yml'
              echo "${TOC_LINKS}" >> 'toc.yml'
            else
              echo "- name: Introduction" >> 'toc.yml'
              echo "  href: index.html" >> 'toc.yml'
            fi
            echo '- name: API' >> 'toc.yml'
            echo '  href: api/toc.yml' >> 'toc.yml'
            echo '  topicHref: api/index.html' >> 'toc.yml'
            echo '  expanded: true' >> 'toc.yml'
            if [[ -f '../LICENSE.md' ]]; then
              echo '- name: License' >> 'toc.yml'
              echo '  href: LICENSE.html' >> 'toc.yml'
            fi
          fi
        cd ..


    - name: Insert define symbols into all the .cs files... hehe.
      shell: bash
      run: |
        for f in $(find . -name '*.cs'); do
          cat .docfx/define_symbols.txt "$f" > "__stmg__"
          mv -f "__stmg__" "$f"
          ## cat "$f"
        done


    - name: Generate docfx config
      shell: bash
      run: |
        cd .docfx

          printf "$(cat docfx-metadata.json)" \
            "__placeholder__" \
            "__nothing__" \
            "${{ inputs.class_members }}" \
            "${{ inputs.define_symbols }}" \
            \
            \
            > docfx-metadata-mref.json

          printf "$(cat docfx-metadata.json)" \
            "outputFormat" \
            "apiPage" \
            "${{ inputs.class_members }}" \
            "${{ inputs.define_symbols }}" \
            \
            \
            > docfx-metadata-api.json

          printf "$(cat docfx-build.json)" \
            "${{ inputs.app_name }}" \
            "${{ inputs.site_title }}" \
            "${{ inputs.site_footer }}" \
            "${{ inputs.site_logo }}" \
            "${{ inputs.site_favicon }}" \
            "${{ inputs.google_analytics }}" \
            "https://${{ github.repository_owner }}.github.io/${{ env.REPO_NAME }}/" \
            \
            > docfx-build.json

          echo "${{ inputs.main_js }}"  >> template/public/main.js
          echo "${{ inputs.main_css }}" >> template/public/main.css

        cd ..


    # DEBUG
    - name: DEBUG
      shell: bash
      run: |
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        cat .docfx/toc.yml
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        cat .docfx/docfx-metadata-mref.json
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"


    # two pass processing
    - name: Run DocFX
      shell: bash
      run: |
        ##dotnet tool update -g docfx
        dotnet tool install --global docfx --version 2.74.1

        pushd .docfx

          ##docfx docfx.json

          # 1st pass
          docfx docfx-metadata-api.json
          jq -c '[ .items[] | .shortName = .name | .shortName |= match("[^\\.]+$").string ]' \
            _site/api/toc.json \
            > toc_api.json

          # 2nd pass
          docfx docfx-metadata-mref.json
          jq -c '[ .items[] | select(.name == "") | .name = "global::" ]' \
            _site/api/toc.json \
            > toc_global.json

          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat toc_global.json
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat toc_api.json
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          # merge toc
          # https://gist.github.com/AlexRamey/7cf83f4618075dc17054d0c88182bbbc
          jq -c --slurpfile global toc_global.json --slurpfile api toc_api.json '$global[0] + $api[0]' \
            ##| jq -c ".order = 100 | .pdf = false | .memberLayout = \"${{ inputs.class_members }}\"" \
            > api/toc.json

          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat api/toc.json
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          # api/toc.json to api/index.md
          echo "# API Reference" > api/index.md
          jq -c '[ .items[] | .items[]? |= if .href then "- [\(.name)](\(.href))" else .name end ]' \
            api/toc.json \
            | jq -r '.[] | .shortName = .name | .shortName |= match("([^\\.]+\\.)?[^\\.]+$").string | "## \(.shortName) <span class=\"\">Namespace</span>", "```csharp", "namespace \(.name)", "```", "\(.items[])"' \
            >> api/index.md

          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          cat api/index.md
          echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          # build
          docfx docfx-build.json

        popd

    - name: TOC expansion
      shell: bash
      run: |
        pushd .docfx/_site
          if [[ -f toc.json ]]; then
            ## sed 's/toc.yml"\,"items"\:\[{/toc.yml"\,"items"\:\[{"expanded"\:true\,/g' -i toc.json
            ## sed 's/html"}\]}\,{/html"}\]}\,{"expanded"\:true\,/g' -i toc.json
            cat toc.json
          fi
        popd


    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        # Upload entire repository
        path: '.docfx/_site'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
